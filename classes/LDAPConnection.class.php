<?php

/**
 * @file LDAPConnection.class.php
 *
 * Search and authenticate against LDAP.
 *
 * This class provides connection, search and bind capabilities for LDAP
 * protocol. It can be used to query information about users and to verify
 * users against their LDAP aacounts.
 *
 * @author Jan Přikryl
 *
 */
class LDAPConnection
{

    private $serverURL;
    private $basedn;
    private $ldap;

    static function isActive(&$smarty)
    {
        return $smarty->_config['ldap_active'];
    }

    /**
     * Class constructor.
     * Opens connection to an LDAP server. Checked only with URL based ldaps:// connections.
     * @param Smarty $smarty Smarty object containing configuration parameters of the LDAP connection, 'ldap_server_url' and 'ldap_basedn'.
     * @throws Exception
     */
    function __construct(&$smarty)
    {
        /* Initialise configuration parameters from Smarty config. */
        $this->serverURL = $smarty->_config['ldap_server_url'];
        $this->basedn = $smarty->_config['ldap_basedn'];

        /* Initialise LDAP connection for LDAP search of usernames and e-mails. */
        $this->ldap = ldap_connect($this->serverURL);
        if (!$this->ldap)
        {
            /* Even if the URL above is wrong, the connection will not fail if
               using OpenLDAP 2.x.x */
            throw new Exception (
                'Nelze se spojit s LDAP serverem ' .
                $this->serverURL
            );
        }

        /* Default protocol version is 2. */
        ldap_set_option($this->ldap, LDAP_OPT_PROTOCOL_VERSION, 3);
    }

    /**
     * Parse, and format a DN string to Array
     *
     * Read a LDAP DN, and return an array keys
     * listing all similar attributes.
     *
     * Also takes care of the character escape and unescape
     *
     * Example:
     * CN=username,OU=UNITNAME,OU=Region,OU=Country,DC=subdomain,DC=domain,DC=com
     *
     * Would normally return:
     * Array (
     *     [count] => 9
     *     [0] => CN=username
     *     [1] => OU=UNITNAME
     *     [2] => OU=Region
     *     [5] => OU=Country
     *     [6] => DC=subdomain
     *     [7] => DC=domain
     *     [8] => DC=com
     * )
     *
     * Returns instead a manageable array:
     * array (
     *     [CN] => array( username )
     *     [OU] => array( UNITNAME, Region, Country )
     *     [DC] => array ( subdomain, domain, com )
     * )
     *
     *
     * @author gabriel at hrz dot uni-marburg dot de 05-Aug-2003 02:27 (part of the character replacement)
     * @author Renoir Boulanger
     *
     * @param  string $dn The DN
     * @return array
     */
    function parseLdapDn($dn)
    {
        $parsr = ldap_explode_dn($dn, 0);
        //$parsr[] = 'EE=Sôme Krazï string';
        //$parsr[] = 'AndBogusOne';
        $out = array();
        foreach ($parsr as $key => $value)
        {
            if (FALSE !== strstr($value, '='))
            {
                list($prefix, $data) = explode("=", $value);
                $data = preg_replace("/\\\([0-9A-Fa-f]{2})/e", "''.chr(hexdec('\\1')).''", $data);
                if (isset($current_prefix) && $prefix == $current_prefix)
                {
                    $out[$prefix][] = $data;
                } else
                {
                    $current_prefix = $prefix;
                    $out[$prefix][] = $data;
                }
            }
        }
        return $out;
    }

    /**
     * Search for information in the LDAP database.
     * @param string $searchString Search string in the form '<item>=<value>'.
     * @throws Exception due to ldap_search() or ldap_count_entries()
     * @return mixed The corresponding LDAP record, if any.
     */
    function searchSingle($searchString)
    {
        /* Fetch information from LDAP about this student.
           Mask out warnings generated by unavailable servers. */
        $res = @ldap_search($this->ldap,
            $this->basedn,
            $searchString);
        if (!$res)
        {
            $errno = ldap_errno($this->ldap);
            $estr = ldap_err2str($errno);
            throw new Exception (
                "Chyba LDAP při vyhledávání `$searchString`: $estr " .
                '(server ' . $this->serverURL . ').');
        }

        /* Check the number of entries. */
        $entries = ldap_count_entries($this->ldap, $res);
        if ($entries > 1)
        {
            throw new Exception ("Got $entries for `$searchString`, expected 0 or 1.");
        }

        /* Get the entry, if any. */
        $ret = NULL;
        if ($entries == 1)
        {
            $info = ldap_get_entries($this->ldap, $res);
            $ret = $info[0];
        }

        return $ret;
    }

    /**
     * Bind to the server with specified user DN and password.
     *
     * @param string $userDN Fully qualified username.
     * @param string $password Password of the user.
     *
     * @return boolean True if the bind was successful, false otherwise.
     */
    function bind($userDN, $password)
    {
        @$ldapbind = ldap_bind($this->ldap, $userDN, $password);
        $ldapstr = var_export($ldapbind, true);
        echo "<!-- binding with `$userDN` and password `$password` -->";
        echo "<!-- ldapbind is $ldapstr -->";
        return ($ldapbind === true);
    }

    /**
     * Close / unbind the LDAP connection.
     */
    function close()
    {
        ldap_unbind($this->ldap);
    }

    /**
     * Get the base DN from the configuration.
     * @return string The string listing the base DN suffix.
     */
    public function getBaseDN()
    {
        return $this->basedn;
    }

    /**
     * Return errno and error string of the last LDAP command.
     * @return array
     */
    public function getError()
    {
        $errno = ldap_errno($this->ldap);
        $errstr = ldap_err2str($errno);
        return array($errno, $errstr);
    }
}